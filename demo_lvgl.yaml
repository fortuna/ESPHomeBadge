# Copyright 2025 Vinicius Fortuna
# SPDX-License-Identifier: Apache-2.0

# This is the file where you can customize the behavior of your badge.

substitutions:
  name: hope-badge

packages:
  base: !include ./badge_pro.yaml

esphome:
  name: ${name}
  friendly_name: HOPE Badge
  on_boot:
    - then:
        logger.log: Hello World

logger:
  level: DEBUG


# Enables Wi-Fi connectivity.
wifi:
  # Fixes Auth Expired issue on ESP32-C3, as per
  # https://community.home-assistant.io/t/unable-to-connect-to-wifi-auth-expired-and-association-expired/678570/2?u=vinifortuna
  # and https://github.com/espressif/arduino-esp32/issues/2144#issuecomment-1212591202
  output_power: 8.5db
  # Enable 802.11v BSS Transition Management for better roaming.
  enable_btm: true
  # Enable 802.11k Radio Resource Management support.
  enable_rrm: true

  # Configures a local access point, in case no wifi is available.
  ap:
    password: fortunaatgithub

# To allow for configuring the wifi on a new device.
captive_portal:

# Sets up a local web server for remote control.
web_server:
  local: true
  version: 3
  sorting_groups:
    - id: sorting_group_badge
      name: Badge Settings
      sorting_weight: -1

# Over-the-Air provisioning.
ota:
  - platform: esphome
    password: !secret ota_password

remote_receiver:
  - id: !extend ir_receiver
    on_nec:
        then:
          - if:
              condition: {lambda: return id(enable_ir_rx);}
              then:
                - lambda: |-
                    ESP_LOGD("IR", "Received NEC command: address=0x%X, command=0x%X", x.address, x.command);
                - if:
                    condition: {lambda: return x.address == 0xD880 && x.command == 0xDD22;}
                    then:
                      - script.execute: run_blast_effect

remote_transmitter:
  - id: !extend ir_transmitter
    on_transmit:
      then:
        - lambda: id(enable_ir_rx) = false;
    on_complete:
      then:
        - delay: 100ms
        - lambda: id(enable_ir_rx) = true;

sensor:
  - platform: uptime
    type: seconds
    name: Uptime

  - id: !extend air_sensor
    eco2:
      on_value:
        - lvgl.label.update:
            id: co2_label
            text: {format: '%.0f', args: [ 'x' ]}
    tvoc:
      on_value:
        - lvgl.label.update:
            id: tvoc_label
            text: {format: '%.0f', args: [ 'x' ]}

light:
  - id: !extend led_strip
    effects:
      - pulse:
          transition_length: 2s
      - flicker:
      - strobe:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
          intensity: 40%

globals:
  # Flag to enable/disable IR RX. This allows the badge to ignore IR commands sent by itself.
  - id: enable_ir_rx
    type: bool
    initial_value: 'true'

script:
#   # Make the LEDs dimmer.
#   - id: dim_down
#     mode: queued
#     then:
#       - if:
#           condition:
#             lambda: 'return id(led_strip).remote_values.get_brightness() <= 0.201f;'
#           then:
#             light.turn_off:
#               id: led_strip
#               transition_length: 0s
#           else:
#             light.dim_relative:
#               id: led_strip
#               relative_brightness: -10%
#               transition_length: 0s

#   # Make the LEDs brighter.
#   - id: dim_up
#     mode: queued
#     then:
#       - if:
#           condition: {light.is_on: led_strip}
#           then:
#             - light.dim_relative:
#                 id: led_strip
#                 relative_brightness: 10%
#                 transition_length: 0s
#           else:
#             - light.turn_on:
#                 id: led_strip
#                 brightness: 20%
#                 transition_length: 0s

#   # Sends the IR blast command.
#   - id: ir_blast
#     mode: single
#     then:
#       - remote_transmitter.transmit_nec:
#           transmitter_id: ir_transmitter
#           address: 0xD880
#           command: 0xDD22

#   # Changes the color of the LED strip.
#   - id: next_color
#     mode: single
#     then:
#       - lambda: |-
#           static int color = 0;
#           color = (color + 1) % 8;
#           if (color == 0) {
#             id(led_strip).turn_off().set_transition_length(0).perform();
#             return;
#           }
#           float red = color & 1 ? 1 : 0;
#           float green = color & 2 ? 1 : 0;
#           float blue = color & 4 ? 1 : 0;
#           id(led_strip).turn_on().set_transition_length(0).set_rgb(red, green, blue).perform();

  - id: run_blast_effect
    mode: single
    then:
      - light.turn_on: {id: led_strip, transition_length: 0s}
      - switch.turn_on: vibration_motor
      - light.turn_off: {id: led_strip, transition_length: 1s}
      - delay: 500ms
      - switch.turn_off: vibration_motor

lvgl:
  displays: [tft_display]
  # Need to reduce due to lack of PSRAM, as per https://esphome.io/components/lvgl/.
  buffer_size: 25%
  encoders:
    enter_button: button_4
    sensor:
      left_button: button_2
      right_button: button_3

  widgets:
    - tabview:
        id: tabview_id
        position: top
        size: 40
        tabs:
        - !include ./lvgl/tab_badge.yaml
        - !include ./lvgl/tab_air.yaml
        - !include ./lvgl/tab_qr.yaml

text:
  - id: badge_title
    name: Title
    initial_value: Badge Title
    platform: template
    icon: mdi:badge-account-horizontal-outline
    optimistic: true
    mode: text
    update_interval: never
    restore_value: true
    web_server:
      sorting_group_id: sorting_group_badge
      sorting_weight: 1
    on_value:
      - lvgl.label.update:
          id: title_label
          text: !lambda return x;
      - if:
          condition: {lambda: return x.length() > 0;}
          then:
            - lvgl.widget.show: title_label
          else:
            - lvgl.widget.hide: title_label

  - id: badge_subtitle
    name: Subtitle
    initial_value: Enable Wi-Fi and configure via local network web server
    platform: template
    icon: mdi:badge-account-horizontal-outline
    optimistic: true
    mode: text
    update_interval: never
    restore_value: true
    web_server:
      sorting_group_id: sorting_group_badge
      sorting_weight: 2
    on_value:
      - lvgl.label.update:
          id: subtitle_label
          text: !lambda return x;
      - if:
          condition: {lambda: return x.length() > 0;}
          then:
            - lvgl.widget.show: subtitle_label
          else:
            - lvgl.widget.hide: subtitle_label

  - name: QR Code Text
    platform: template
    icon: mdi:qrcode
    optimistic: true
    mode: text
    update_interval: never
    restore_value: true
    on_value:
      - lvgl.qrcode.update:
          id: qr_code_image
          text: !lambda return x;
      - if:
          condition: {lambda: return x.length() > 0;}
          then:
            - lvgl.widget.show: qr_code_image
            - lvgl.widget.hide: empty_qr_code_label
          else:
            - lvgl.widget.hide: qr_code_image
            - lvgl.widget.show: empty_qr_code_label