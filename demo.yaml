# Copyright 2025 Vinicius Fortuna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the file where you can customize the behavior of your badge.

packages:
  base: !include ./badge_basic.yaml

esphome:
  name: hope-badge
  friendly_name: HOPE Badge
  on_boot: 
    - then:
        logger.log: Hello World

logger:
  level: DEBUG


# Enables Wi-Fi connectivity.
wifi:
  # Fixes Auth Expired issue on ESP32-C3, as per
  # https://community.home-assistant.io/t/unable-to-connect-to-wifi-auth-expired-and-association-expired/678570/2?u=vinifortuna
  # and https://github.com/espressif/arduino-esp32/issues/2144#issuecomment-1212591202
  output_power: 8.5db
  # Enable 802.11v BSS Transition Management for better roaming.
  enable_btm: true
  # Enable 802.11k Radio Resource Management support.  
  enable_rrm: true

  # Configures a local access point, in case no wifi is available.
  ap:
    password: fortunaatgithub

# To allow for configuring the wifi on a new device.
captive_portal:

# Sets up a local web server for remote control.
web_server:
  local: true
  version: 3

# Over-the-Air provisioning.
ota:
  - platform: esphome
    password: !secret ota_password

binary_sensor:
  - id: !extend button_1
    on_click: 
      then:
        - script.execute: next_effect

  - id: !extend button_2
    on_click: 
      then:
        - script.execute: dim_down

  - id: !extend button_3
    on_click: 
      then:
        - script.execute: dim_up

  - id: !extend button_4
    on_click: 
      then:
        - script.execute: ir_blast


remote_receiver:
  - id: !extend ir_receiver
    on_nec:
        then:
          - lambda: |-
              ESP_LOGD("IR", "Received NEC command: address=0x%X, command=0x%X", x.address, x.command);
          - if:
              condition: {lambda: return x.address == 0xD880 && x.command == 0xDD22;}
              then:
                - script.execute: run_blast_effect

light:
  - id: !extend led_strip
    effects:
      - pulse:
          transition_length: 2s
      - flicker:
      - strobe: 
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:  
          intensity: 40%

script:
  - id: dim_down
    mode: queued
    then:
      - if:
          condition:
            lambda: 'return id(led_strip).remote_values.get_brightness() <= 0.201f;'
          then:
            light.turn_off:
              id: led_strip
              transition_length: 0s
          else:
            light.dim_relative:
              id: led_strip
              relative_brightness: -10%
              transition_length: 0s

  - id: dim_up
    mode: queued
    then:
      - if:
          condition: {light.is_on: led_strip}
          then:
            - light.dim_relative:
                id: led_strip
                relative_brightness: 10%
                transition_length: 0s
          else:
            - light.turn_on:
                id: led_strip
                brightness: 20%
                transition_length: 0s

  - id: ir_blast
    mode: single
    then:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0xD880
          command: 0xDD22 

  - id: next_effect
    mode: queued
    then:
      - logger.log: "TODO: Next effect"

  - id: run_blast_effect
    mode: single
    then:
      - light.turn_on: {id: led_strip, transition_length: 0s}
      - switch.turn_on: vibration_motor
      - light.turn_off: {id: led_strip, transition_length: 1s}
      - delay: 500ms
      - switch.turn_off: vibration_motor
