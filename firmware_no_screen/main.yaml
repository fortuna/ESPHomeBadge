# Copyright 2025 Vinicius Fortuna
# SPDX-License-Identifier: Apache-2.0

# This is the file where you can customize the behavior of your badge.

substitutions:
  name: hope-badge

packages:
  hardware: !include '../hardware/badge_0.8.15_pro.yaml'

esphome:
  name: ${name}
  friendly_name: HOPE Badge
  name_add_mac_suffix: true
  on_boot:
    - then:
        logger.log: Hello World

logger:
  level: DEBUG

# Enables Wi-Fi connectivity.
wifi:
  # Fixes Auth Expired issue on ESP32-C3, as per
  # https://community.home-assistant.io/t/unable-to-connect-to-wifi-auth-expired-and-association-expired/678570/2?u=vinifortuna
  # and https://github.com/espressif/arduino-esp32/issues/2144#issuecomment-1212591202
  output_power: 8.5db
  # Enable 802.11v BSS Transition Management for better roaming.
  enable_btm: true
  # Enable 802.11k Radio Resource Management support.
  enable_rrm: true

  # Configures a local access point, in case no wifi is available.
  ap:
    password: fortunaatgithub

# To allow for configuring the wifi on a new device.
captive_portal:

# Go to https://www.improv-wifi.com/ and follow the instructions.
improv_serial:

# Sets up a local web server for remote control.
web_server:
  local: true
  version: 3
  sorting_groups:
    - id: sorting_group_badge
      name: Badge Settings
      sorting_weight: -1

button:
  - platform: factory_reset
    name: Restore Data to Factory Defaults
    disabled_by_default: true

binary_sensor:
  - id: !extend button_1
    on_click:
      then:
        - script.execute: next_color

  - id: !extend button_2
    on_click:
      then:
        - script.execute: dim_down

  - id: !extend button_3
    on_click:
      then:
        - script.execute: dim_up

  - id: !extend button_4
    on_click:
      then:
        - script.execute: ir_blast

remote_receiver:
  - id: !extend ir_receiver
    on_nec:
      then:
        - if:
            condition: {lambda: return id(enable_ir_rx);}
            then:
              - lambda: |-
                  ESP_LOGD("IR", "Received NEC command: address=0x%X, command=0x%X", x.address, x.command);
              - if:
                  condition: {lambda: return x.address == 0xD880 && x.command == 0xDD22;}
                  then:
                    - script.execute: run_blast_effect

remote_transmitter:
  - id: !extend ir_transmitter
    on_transmit:
      then:
        - lambda: id(enable_ir_rx) = false;
    on_complete:
      then:
        - delay: 100ms
        - lambda: id(enable_ir_rx) = true;

light:
  - id: !extend led_strip
    effects:
      - pulse:
          transition_length: 2s
      - flicker:
      - strobe:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
          intensity: 40%

globals:
  # Flag to enable/disable IR RX. This allows the badge to ignore IR commands sent by itself.
  - id: enable_ir_rx
    type: bool
    initial_value: 'true'

script:
  # Make the LEDs dimmer.
  - id: dim_down
    mode: queued
    then:
      - if:
          condition:
            lambda: 'return id(led_strip).remote_values.get_brightness() <= 0.201f;'
          then:
            light.turn_off:
              id: led_strip
              transition_length: 0s
          else:
            light.dim_relative:
              id: led_strip
              relative_brightness: -10%
              transition_length: 0s

  # Make the LEDs brighter.
  - id: dim_up
    mode: queued
    then:
      - if:
          condition: {light.is_on: led_strip}
          then:
            - light.dim_relative:
                id: led_strip
                relative_brightness: 10%
                transition_length: 0s
          else:
            - light.turn_on:
                id: led_strip
                brightness: 20%
                transition_length: 0s

  # Sends the IR blast command.
  - id: ir_blast
    mode: single
    then:
      - remote_transmitter.transmit_nec:
          transmitter_id: ir_transmitter
          address: 0xD880
          command: 0xDD22

  # Changes the color of the LED strip.
  - id: next_color
    mode: single
    then:
      - lambda: |-
          static int color = 0;
          color = (color + 1) % 8;
          if (color == 0) {
            id(led_strip).turn_off().set_transition_length(0).perform();
            return;
          }
          float red = color & 1 ? 1 : 0;
          float green = color & 2 ? 1 : 0;
          float blue = color & 4 ? 1 : 0;
          id(led_strip).turn_on().set_transition_length(0).set_rgb(red, green, blue).perform();

  - id: run_blast_effect
    mode: single
    then:
      - light.turn_on: {id: led_strip, transition_length: 0s}
      - switch.turn_on: vibration_motor
      - light.turn_off: {id: led_strip, transition_length: 1s}
      - delay: 500ms
      - switch.turn_off: vibration_motor
